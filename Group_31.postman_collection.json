{
	"info": {
		"_postman_id": "b8a7f37e-8a93-4653-8bc9-c526b645fdca",
		"name": "Group_31",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21506736"
	},
	"item": [
		{
			"name": "/",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/",
					"host": [
						"{{url}}"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "first",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_method",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/get_method?name=Keit&age=33",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "Keit"
						},
						{
							"key": "age",
							"value": "33"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"// 3. Спарсить respons body в json\r",
							"let jsonData = pm.response.json();\r",
							"// 4. Проверить, что name в ответе равно name s reguest(name вбить руками)\r",
							"let user_name = jsonData.name;\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(user_name).to.eql('keit');\r",
							"});\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql('33');\r",
							"});\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000) ; \r",
							"}) ;\r",
							"// 7. Спарсить request\r",
							"let reqData = request.data\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(user_name).to.eql(reqData.name); \r",
							"}) ;\r",
							"  // 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"}); \r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+reqData.salary) ; \r",
							"}) ;\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let req_salary_1_5 = reqData.salary * 4\r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req_salary_1_5) ; \r",
							"}) ;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "keit",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": [
				{
					"name": "user_info_3",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "keit",
									"type": "text"
								},
								{
									"key": "age",
									"value": "33",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "object_info_1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "keit",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_1?name=Keit&age=33&weight=65",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Keit"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "weight",
							"value": "65"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_2",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "keit",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_2?name=Keit&age=33&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Keit"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 4. Спарсить request\r",
							"const requestData = pm.request.url.query.toObject()\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let user_name = jsonData.name;\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(user_name).to.eql(requestData.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(requestData.age);\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+requestData.salary);\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"let req_family = jsonData.family;\r",
							"console.log(req_family);\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog have name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property (\"name\");\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog have age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property (\"age\");\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"name include Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.have.include (\"Luky\");\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"age include 4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.have.include +(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "keit",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Keit&age=33&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Keit"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 4. Спарсить request\r",
							"const requestData = pm.request.url.query.toObject()\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let user_name = jsonData.name;\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(user_name).to.eql(requestData.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+requestData.age);\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(requestData.salary);\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary);\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0]);\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1]);\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2]);\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Your test salary 0 \", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+requestData.salary);\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Your test salary 1 \", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(requestData.salary*2);\r",
							"});\r",
							" // 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Your test salary 2 \", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(requestData.salary*3);\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set('name')\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set('age')\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set('salary')\r",
							"// 18. Передать в окружение переменную name\r",
							"\r",
							"pm.environment.set('name', requestData.name);\r",
							"// 19. Передать в окружение переменную age\r",
							"\r",
							"pm.environment.set('age', requestData.age);\r",
							"// 20. Передать в окружение переменную salary\r",
							"let resp_salary = jsonData.salary\r",
							"pm.environment.set('salary', requestData.salary);\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"// console.log(typeof(resp_salary))\r",
							"\r",
							"resp_salary.forEach(element => console.log(element));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "keit",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_4?name=Keit&age=33&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Keit"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 7. Спарсить request\r",
							"const reqData = request.data;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response to.have.property start_qa_salary\", function () {\r",
							"   pm.expect(jsonData).to.have.property ('start_qa_salary');\r",
							"   }); \r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"   pm.test(\"json response to.have.property qa_salary_after_6_months\", function () {\r",
							"   pm.expect(jsonData).to.have.property ('qa_salary_after_6_months');\r",
							"   }); \r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							" pm.test(\"json response to.have.property qa_salary_after_12_months\", function () {\r",
							"   pm.expect(jsonData).to.have.property ('qa_salary_after_12_months');\r",
							"   }); \r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							" pm.test(\"json response to.have.property qa_salary_after_1.5_year\", function () {\r",
							"   pm.expect(jsonData).to.have.property ('qa_salary_after_1.5_year');\r",
							"   }); \r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"   pm.test(\"json response to.have.property qa_salary_after_3.5_years\", function () {\r",
							"   pm.expect(jsonData).to.have.property ('qa_salary_after_3.5_years');\r",
							"   }); \r",
							"// 13. Проверить, что json response имеет параметр person\r",
							" pm.test(\"json response to.have.property person\", function () {\r",
							" pm.expect(jsonData).to.have.property ('person');\r",
							" }); \r",
							" // 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let req_salary = + reqData.salary\r",
							"pm.test(\"start_qa_salary to iql salary request\", function () {\r",
							" pm.expect(jsonData.start_qa_salary).to.eql (req_salary);\r",
							" }); \r",
							" // 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.\r",
							" pm.test(\"qa_salary_after_6_months to iql salary*2 request\", function () {\r",
							" pm.expect(jsonData.qa_salary_after_6_months).to.eql (req_salary*2);\r",
							" }); \r",
							" // 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months to iql salary*2.7 request\", function () {\r",
							" pm.expect(jsonData.qa_salary_after_12_months).to.eql (req_salary*2.7);\r",
							" }); \r",
							" // 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year to iql salary*3.3 request\", function () {\r",
							" pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql (req_salary*3.3);\r",
							" }); \r",
							" // 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							" pm.test(\"qa_salary_after_3.5_years to iql salary*3.8 request\", function () {\r",
							" pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql (req_salary*3.8);\r",
							" }); \r",
							" //19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"  pm.test(\"person, 1 u_name to eql salary request\", function () {\r",
							" pm.expect(jsonData.person.u_name[1]).to.eql (req_salary);\r",
							" }); \r",
							" // 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							" pm.test(\" u_age to eql age request\", function () {\r",
							" pm.expect(jsonData.person.u_age).to.eql (+reqData.age);\r",
							" }); \r",
							" // 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							" pm.test(\"u_salary_5_yearsto eql salary*4.2 request\", function () {\r",
							" pm.expect(jsonData.person.u_salary_5_years).to.eql (req_salary*4.2);\r",
							" }); \r",
							" // 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							" for (let i in jsonData.person) {\r",
							"     console.log('Elements in person: ',i);\r",
							" };"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "keit",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 7. Спарсить request\r",
							"const reqData = request.data;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response to.have.property start_qa_salary\", function () {\r",
							"   pm.expect(jsonData).to.have.property ('start_qa_salary');\r",
							"   }); \r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"   pm.test(\"json response to.have.property qa_salary_after_6_months\", function () {\r",
							"   pm.expect(jsonData).to.have.property ('qa_salary_after_6_months');\r",
							"   }); \r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							" pm.test(\"json response to.have.property qa_salary_after_12_months\", function () {\r",
							"   pm.expect(jsonData).to.have.property ('qa_salary_after_12_months');\r",
							"   }); \r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							" pm.test(\"json response to.have.property qa_salary_after_1.5_year\", function () {\r",
							"   pm.expect(jsonData).to.have.property ('qa_salary_after_1.5_year');\r",
							"   }); \r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"   pm.test(\"json response to.have.property qa_salary_after_3.5_years\", function () {\r",
							"   pm.expect(jsonData).to.have.property ('qa_salary_after_3.5_years');\r",
							"   }); \r",
							"// 13. Проверить, что json response имеет параметр person\r",
							" pm.test(\"json response to.have.property person\", function () {\r",
							" pm.expect(jsonData).to.have.property ('person');\r",
							" }); \r",
							" // 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let req_salary = + reqData.salary\r",
							"pm.test(\"start_qa_salary to iql salary request\", function () {\r",
							" pm.expect(jsonData.start_qa_salary).to.eql (req_salary);\r",
							" }); \r",
							" // 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.\r",
							" pm.test(\"qa_salary_after_6_months to iql salary*2 request\", function () {\r",
							" pm.expect(jsonData.qa_salary_after_6_months).to.eql (req_salary*2);\r",
							" }); \r",
							" // 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months to iql salary*2.7 request\", function () {\r",
							" pm.expect(jsonData.qa_salary_after_12_months).to.eql (req_salary*2.7);\r",
							" }); \r",
							" // 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year to iql salary*3.3 request\", function () {\r",
							" pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql (req_salary*3.3);\r",
							" }); \r",
							" // 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							" pm.test(\"qa_salary_after_3.5_years to iql salary*3.8 request\", function () {\r",
							" pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql (req_salary*3.8);\r",
							" }); \r",
							" //19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"  pm.test(\"person, 1 u_name to eql salary request\", function () {\r",
							" pm.expect(jsonData.person.u_name[1]).to.eql (req_salary);\r",
							" }); \r",
							" // 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							" pm.test(\" u_age to eql age request\", function () {\r",
							" pm.expect(jsonData.person.u_age).to.eql (+reqData.age);\r",
							" }); \r",
							" // 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							" pm.test(\"u_salary_5_yearsto eql salary*4.2 request\", function () {\r",
							" pm.expect(jsonData.person.u_salary_5_years).to.eql (req_salary*4.2);\r",
							" }); \r",
							" // 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							" for (let i in jsonData.person) {\r",
							"     console.log('Elements in person: ',i);\r",
							" };"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "keit",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}